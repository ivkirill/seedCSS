//
// Forms
// --------------------------------------------------


// Normalize non-controls
//
// Restyle and baseline non-control form elements.

fieldset {
  margin: 10px 0;
}

/*
legend {
  display: block;
  width: 100%;
  padding: 0;
  margin-bottom: @line-height-base;
  font-size: (@font-size-base * 1.5);
  line-height: inherit;
  color: @legend-color;
  border: 0;
  border-bottom: 1px solid @legend-border-color;
}

*/

label {
  display: inline-block;
  max-width: 100%;
}

label[disabled], label[disabled] input {
  color: @button-link-disabled-color;
}


// Normalize form controls
//
// While most of our form styles require extra classes, some basic normalization
// is required to ensure optimum display with or without those classes to better
// address browser inconsistencies.

// Override content-box in Normalize (* isn't specific enough)
input[type="search"] {
  .box-sizing(border-box);
}

// Position radios and checkboxes better
input[type="radio"],
input[type="checkbox"] {
  margin: 4px 0 0;
  margin-top: 1px;
  line-height: normal;
}

// Set the height of file controls to match text inputs
input[type="file"] {
  display: block;
}

// Make range inputs behave like textual form controls
input[type="range"] {
  display: block;
  width: 100%;
}

// Make range inputs behave like textual form controls
input[type="number"][min][max] {
  display: inline-block;
  text-align: center;
  line-height: 100%;
  padding: 0;
}

// Make multiple select elements height not fixed
select[multiple],
select[size] {
  height: auto;
}

// Focus for file, radio, and checkbox
input[type="file"]:focus,
input[type="radio"]:focus,
input[type="checkbox"]:focus {
  .tab-focus();
}

// Adjust output element
output {
  display: block;
  padding-top: (@padding-vertical-base + 1);
  font-size: @font-size-base;
  line-height: @line-height-base;
  color: @input-color;
}


// Common form controls
//
// Shared size and type resets for form controls. Apply `.form-control` to any
// of the following form controls:
//
// select
// textarea
// input[type="text"]
// input[type="password"]
// input[type="datetime"]
// input[type="datetime-local"]
// input[type="date"]
// input[type="month"]
// input[type="time"]
// input[type="week"]
// input[type="number"]
// input[type="email"]
// input[type="url"]
// input[type="search"]
// input[type="tel"]
// input[type="color"]

.form-input,
select,
textarea,
input[type="text"],
input[type="password"],
input[type="datetime"],
input[type="datetime-local"],
input[type="date"],
input[type="month"],
input[type="time"],
input[type="week"],
input[type="number"],
input[type="email"],
input[type="url"],
input[type="search"],
input[type="tel"],
input[type="color"] {
  display: block;
  width: auto;
  height: @input-height-base; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  padding: @padding-vertical-base @padding-horizontal-base;
  font-size: @font-size-base;
  line-height: @line-height-base;
  color: @input-color;
  background-color: @input-bg;
  background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
  border: @input-border-width solid @input-border-color;
  border-radius: @input-border-radius; // Note: This has no effect on <select>s in some browsers, due to the limited stylability of <select>s in CSS.
  outline: none;

  .transition(~"border-color ease-in-out .15s");

  .form-control-focus();

  // Placeholder
  .placeholder();

  // Disabled and read-only inputs
  &[disabled],
  &[readonly],
  fieldset[disabled] & {
    background-color: @input-bg-disabled;
	color: @input-color-disabled;
    opacity: 1;
  }

  &[disabled],
  label[disabled] &, 
  fieldset[disabled] & {
    cursor: @cursor-disabled;
  }

  // Reset height for `textarea`s
  textarea& {
    height: auto;
    resize:vertical;
  }

  select& {
    display:inline-block;
    width:auto;
  }
}

// Reset height for `textarea`s
textarea {
  height: auto;
  resize:vertical;
}



input[type="search"] {
  -webkit-appearance: none;
}


// Special styles for iOS temporal inputs
@media screen and (-webkit-device-pixel-ratio: 0) {
  input[type="date"],
  input[type="time"],
  input[type="datetime-local"],
  input[type="month"] {
    line-height: @input-height-base;

    &.input-sm,
    .input-group-sm & {
      line-height: @input-height-small;
    }

    &.input-lg,
    .input-group-lg & {
      line-height: @input-height-large;
    }
  }
}

.form-wrapper {
//  .make-group();
}

// Form groups
.form-group {
  .make-grid(@grid-gutter-width; @grid-outdent-width);

    .title {
      padding-left:  (@grid-gutter-width / 2);
      padding-right: (@grid-gutter-width / 2);

      .flex-basis(100%);

      text-align:left;

      @media (min-width: @screen-s) {
      .flex-basis(25%);

        text-align:right;
      }

      padding-top:7px;

      label { font-weight:normal; }
      input[type="button"] { margin-top:-7px; }

      .btn {
	margin-top:-7px;
	position: relative;
	z-index:2;
      }
    }
  
    .input-holder {
      padding-left:  (@grid-gutter-width / 2);
      padding-right: (@grid-gutter-width / 2);
      .flex-basis(100%);

      @media (min-width: @screen-s) {
       .flex-basis(75%);
      }

      input[type="email"],
      input[type="number"],
      input[type="search"],
      input[type="text"],
      input[type="tel"],
      input[type="url"],
      input[type="password"],
      textarea,
      select,
      .select {
         width: 100%;
      }
    }

    .caption {
      .flex-basis(100%);

       text-align:center;
       font-size: ceil((@font-size-base * 1.7));
       font-weight:500;

       .h3 {
          margin-bottom: 0;
       }
    }

    label.input-checkbox-label {
      .display-flex();
      .align-items(center);
      font-weight:normal;

      span {
        cursor:pointer;
        border-bottom:1px dotted;
      }
      
      input[type="radio"],
      input[type="checkbox"] {
        position: static;
        margin-right: 4px;
        margin-left: 0;
        margin-top: 0;
      }
    }
}

.form-group + .form-group { margin-top: @form-group-margin-top; }

// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

.radio,
.checkbox {
  position: relative;
  display: block;
  margin-top: 10px;
  margin-bottom: 10px;

  label {
    min-height: @line-height-base; // Ensure the input doesn't jump when there is no text
    padding-left: 20px;
    margin-bottom: 0;
    font-weight: normal;
    cursor: pointer;
  }
}
.radio input[type="radio"],
.radio-inline input[type="radio"],
.checkbox input[type="checkbox"],
.checkbox-inline input[type="checkbox"] {
  position: absolute;
  margin-left: -20px;
  margin-top: 4px;
}

.radio + .radio,
.checkbox + .checkbox {
  margin-top: -5px; // Move up sibling radios or checkboxes for tighter spacing
}

// Radios and checkboxes on same line
.radio-inline,
.checkbox-inline {
  position: relative;
  display: inline-block;
  padding-left: 20px;
  margin-bottom: 0;
  vertical-align: middle;
  font-weight: normal;
  cursor: pointer;
}
.radio-inline + .radio-inline,
.checkbox-inline + .checkbox-inline {
  margin-top: 0;
  margin-left: 10px; // space out consecutive inline controls
}

// Apply same disabled cursor tweak as for inputs
// Some special care is needed because <label>s don't inherit their parent's `cursor`.
//
// Note: Neither radios nor checkboxes can be readonly.
input[type="radio"],
input[type="checkbox"] {
  &[disabled],
  &.disabled,
  fieldset[disabled] & {
    cursor: @cursor-disabled;
  }
}

// These classes are used directly on <label>s
.radio-inline,
.checkbox-inline {
  &.disabled,
  fieldset[disabled] & {
    cursor: @cursor-disabled;
  }
}
// These classes are used on elements with <label> descendants
.radio,
.checkbox {
  &.disabled,
  fieldset[disabled] & {
    label {
      cursor: @cursor-disabled;
    }
  }
}


// Static form control text
//
// Apply class to a `p` element to make any string of text align with labels in
// a horizontal form layout.

.form-control-static {
  // Size it appropriately next to real form controls
  padding-top: (@padding-vertical-base + 1);
  padding-bottom: (@padding-vertical-base + 1);
  // Remove default margin from `p`
  margin-bottom: 0;
  min-height: (@line-height-base + @font-size-base);

  &.input-lg,
  &.input-sm {
    padding-left: 0;
    padding-right: 0;
  }
}


// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.
//
// The `.form-group-* form-control` variations are sadly duplicated to avoid the
// issue documented in https://github.com/twbs/bootstrap/issues/15074.

.input-sm {
  .input-size(@input-height-small; @padding-vertical-small; @padding-horizontal-small; @font-size-small; @line-height-small; @input-border-radius-small);
}
.form-group-sm {
  .form-control {
    .input-size(@input-height-small; @padding-vertical-small; @padding-horizontal-small; @font-size-small; @line-height-small; @input-border-radius-small);
  }
  .form-control-static {
    height: @input-height-small;
    padding: @padding-vertical-small @padding-horizontal-small;
    font-size: @font-size-small;
    line-height: @line-height-small;
    min-height: (@line-height-base + @font-size-small);
  }
}

.input-lg {
  .input-size(@input-height-large; @padding-vertical-large; @padding-horizontal-large; @font-size-large; @line-height-large; @input-border-radius-large);
}
.form-group-lg {
  .form-control {
    .input-size(@input-height-large; @padding-vertical-large; @padding-horizontal-large; @font-size-large; @line-height-large; @input-border-radius-large);
  }
  .form-control-static {
    height: @input-height-large;
    padding: @padding-vertical-large @padding-horizontal-large;
    font-size: @font-size-large;
    line-height: @line-height-large;
    min-height: (@line-height-base + @font-size-large);
  }
}


// Form control feedback states
//
// Apply contextual and semantic states to individual form controls.

.has-feedback {
  // Enable absolute positioning
  position: relative;

  // Ensure icons don't overlap text
  .form-control {
    padding-right: (@input-height-base * 1.25);
  }

  .input-status {
    display: block;
  }
}

.input-status {
  position: absolute;
  top: 0;
  right: (@input-height-base / 2);
  z-index: 2; // Ensure icon is above input groups
  display: none;
  width: @input-height-base;
  height: @input-height-base;
  line-height: @input-height-base;
  text-align: center;
  pointer-events: none;
}

.input-lg + .form-control-feedback,
.input-lg + .input-status {
  width: @input-height-large;
  height: @input-height-large;
  line-height: @input-height-large;
}
.input-sm + .form-control-feedback,
.input-sm + .input-status {
  width: @input-height-small;
  height: @input-height-small;
  line-height: @input-height-small;
}

// Feedback states
.has-success {
  .form-control-validation(@state-success-text; @state-success-text; @state-success-bg);

  .fa:before {
    content: "\f00c";
  }
}
.has-warning {
  .form-control-validation(@state-warning-text; @state-warning-text; @state-warning-bg);
}
.has-error {
  .form-control-validation(@state-error-text; @state-error-text; @state-error-bg);

  .fa:before {
    content: "\f00d";
  }
}
.has-ajax {
  .form-control-validation(@state-warning-text; @state-warning-text; @state-warning-bg);
}


// Horizontal forms
//
// Horizontal forms are built on grid classes and allow you to create forms with
// labels on the left and inputs on the right.

.form-horizontal {

  // Consistent vertical alignment of radios and checkboxes
  //
  // Labels also get some reset styles, but that is scoped to a media query below.
  .radio,
  .checkbox,
  .radio-inline,
  .checkbox-inline {
    margin-top: 0;
    margin-bottom: 0;
    padding-top: (@padding-vertical-base + 1); // Default padding plus a border
  }
  // Account for padding we're adding to ensure the alignment and of help text
  // and other content below items
  .radio,
  .checkbox {
    min-height: (@line-height-base + (@padding-vertical-base + 1));
  }

  // Make form groups behave like rows
  .form-group {
//    .make-row();
    .make-group(0);
  }

  // Reset spacing and right align labels, but scope to media queries so that
  // labels on narrow viewports stack the same as a default form example.
  @media (min-width: @screen-s) {
    .control-label {
      text-align: right;
      margin-bottom: 0;
      padding-top: (@padding-vertical-base + 1); // Default padding plus a border
    }
  }

  // Validation states
  //
  // Reposition the icon because it's now within a grid column and columns have
  // `position: relative;` on them. Also accounts for the grid gutter padding.
  .has-feedback .form-control-feedback {
    right: (@grid-gutter-width / 2);
  }

  // Form group sizes
  //
  // Quick utility class for applying `.input-lg` and `.input-sm` styles to the
  // inputs and labels within a `.form-group`.
  .form-group-lg {
    @media (min-width: @screen-s) {
      .control-label {
        padding-top: ((@padding-vertical-large * @line-height-large) + 1);
      }
    }
  }
  .form-group-sm {
    @media (min-width: @screen-s) {
      .control-label {
        padding-top: (@padding-vertical-small + 1);
      }
    }
  }
}

.gform-status {
  margin: 0.5rem 0;
}


//
// Input groups
// --------------------------------------------------

// Base styles
// -------------------------
/*
.input-group {
  position: relative; // For dropdowns
  display: table;
  border-collapse: separate; // prevent input groups from inheriting border styles from table cells when placed within a table

  // Undo padding and float of grid classes
  &.cell {
    float: none;
    padding-left: 0;
    padding-right: 0;
  }

  .form-input {
    // Ensure that the input is always above the *appended* addon button for
    // proper border colors.
    position: relative;
    z-index: 1;

    // IE9 fubars the placeholder attribute in text inputs and the arrows on
    // select elements in input groups. To fix it, we float the input. Details:
    // https://github.com/twbs/bootstrap/issues/11561#issuecomment-28936855
    float: left;
    margin-bottom: 0;

    &:not([class*="col-"]) {
      width:100%;
    }

    .input-group-btn + & {
      .border-left-radius(0);
    }
  }

  .form-control + .form-control {
    margin-left: -1px;
  }

}

// Sizing options
//
// Remix the default form control sizing classes into new ones for easier
// manipulation.

.input-group-lg > .form-control,
.input-group-lg > .input-group-addon,
.input-group-lg > .input-group-btn > .btn {
  .input-lg();
}
.input-group-sm > .form-control,
.input-group-sm > .input-group-addon,
.input-group-sm > .input-group-btn > .btn {
  .input-sm();
}


// Display as table-cell
// -------------------------
.input-group-addon,
.input-group-btn,
.input-group .form-control,
.input-group .select {
  display: table-cell;

  &:not(:first-child):not(:last-child) {
    border-radius: 0;
  }
}
// Addon and addon wrapper for buttons
.input-group-addon,
.input-group-btn {
  width: 1%;
  white-space: nowrap;
  vertical-align: middle; // Match the inputs
}

// Text input groups
// -------------------------
.input-group-addon {
  padding: @padding-vertical-base @padding-horizontal-base;
  font-size: @font-size-base;
  font-weight: normal;
  line-height: 1;
  color: @input-color;
  text-align: center;
  background-color: @input-group-addon-bg;
  border: 1px solid @input-group-addon-border-color;
  border-radius: @border-radius-base;

  // Sizing
  &.input-sm {
    padding: @padding-vertical-small @padding-horizontal-small;
    font-size: @font-size-small;
    border-radius: @border-radius-small;
  }
  &.input-lg {
    padding: @padding-vertical-large @padding-horizontal-large;
    font-size: @font-size-large;
    border-radius: @border-radius-large;
  }

  // Nuke default margins from checkboxes and radios to vertically center within.
  input[type="radio"],
  input[type="checkbox"] {
    margin-top: 0;
  }
}

// Reset rounded corners
.input-group .form-control:first-child,
.input-group-addon:first-child,
.input-group-btn:first-child > .btn,
.input-group-btn:first-child > .btn-group > .btn,
.input-group-btn:first-child > .dropdown-toggle,
.input-group-btn:last-child > .btn:not(:last-child):not(.dropdown-toggle),
.input-group-btn:last-child > .btn-group:not(:last-child) > .btn {
  .border-right-radius(0);
}
.input-group-addon:first-child {
  border-right: 0;
}
.input-group .form-control:last-child,
.input-group-addon:last-child,
.input-group-btn:last-child > .btn,
.input-group-btn:last-child > .btn-group > .btn,
.input-group-btn:last-child > .dropdown-toggle,
.input-group-btn:first-child > .btn:not(:first-child),
.input-group-btn:first-child > .btn-group:not(:first-child) > .btn {
  .border-left-radius(0);
}
.input-group-addon:last-child {
  border-left: 0;
}

// Button input groups
// -------------------------
.input-group-btn {
  position: relative;
  // Jankily prevent input button groups from wrapping with `white-space` and
  // `font-size` in combination with `inline-block` on buttons.
  font-size: 0;
  white-space: nowrap;

  // Negative margin for spacing, position for bringing hovered/focused/actived
  // element above the siblings.
  > .btn {
    position: relative;
    + .btn {
      margin-left: -1px;
    }
    // Bring the "active" button to the front
    &:hover,
    &:focus,
    &:active {
      z-index: 2;
    }
  }

  // Negative margin to only have a 1px border between the two
  &:first-child {
    > .btn,
    > .btn-group {
      margin-right: -1px;
    }
  }
  &:last-child {
    > .btn,
    > .btn-group {
      margin-left: -1px;
    }
  }
}
*/

/* Form filter */
.filter {
  .filter-title {
    font-size:120%;
  }
  .btn-minimize {
    .fa {
      .transition-property("all");
      .transition-duration(.35s);
      .transition-timing-function(ease);
      .rotate(-180deg);
    }

    &.closed .fa {
      .rotate(0);
    }
  }
}

// UI
// ----------------------
// input alike for CMS
[data-ui][contenteditable="true"] {
  min-height: @line-height-base;
  padding: @padding-vertical-base @padding-horizontal-base;
  color: @input-color;
  border: @input-border-width solid @input-border-color;
  border-radius: @input-border-radius;
  outline: none;

  .transition(~"border-color ease-in-out .15s");

  .form-control-focus();

  // Disabled and read-only inputs
  &[disabled],
  &[readonly],
  fieldset[disabled] & {
    background-color: @input-bg-disabled;
	color: @input-color-disabled;
    opacity: 1;
  }

  &[disabled],
  label[disabled] &, 
  fieldset[disabled] & {
    cursor: @cursor-disabled;
  }

  &:empty {
    background-color: @color-light;
    min-height: @line-height-base;

    &:before {
      content: attr(data-placeholder);
      color: @input-color-placeholder;
    }
  }

  &:hover {
    background-color: darken(@input-bg, 2%);
  }
}

