// Grid system

// Creates a wrapper for a series of cells
.make-grid(@gutter: @grid-gutter-width; @outdent: @grid-outdent-width) {
  margin-left:  (@gutter / -2);
  margin-right: (@gutter / -2);

  .display-flex();
  .flex(0 1 auto);
  .flex-wrap(wrap);
  .flex-direction(row);
  
//  .align-content(stretch);  

  &.nomargin {
    margin-left:  0;
    margin-right: 0;
  }

  &.nowrap {
    .flex-wrap(nowrap);
  }
  
// enable wrapping  
  &.wrap {
    .flex-wrap(wrap);
  }  

  &.reverse {
    .flex-direction(row-reverse);
  }  
  &.column {
     -webkit-box-orient: vertical;
    .flex-direction(column);
  }  
  &.column.reverse {
     -webkit-box-orient: vertical;
    .flex-direction(column-reverse);
  }

// justify-content alogn MAIN AXIS of container
  &.left {
    -webkit-box-pack: start;
   .justify-content(flex-start);
    text-align: left;
  }
  &.center {
   .justify-content(center);
    text-align: center;
  }
  &.right {
    -webkit-box-pack: end;
   .justify-content(flex-end);
    text-align: right;
  }
  &.around {
    -ms-flex-pack: distribute;
   .justify-content(space-around);
  }  
  &.between {
   -webkit-box-pack: justify;
   -ms-flex-pack: justify;
   .justify-content(space-between);
  }  



  &.top {
   .align-items(flex-start);
  }  
  &.bottom {
   .align-items(flex-end);
  }  
  &.middle {
   .align-items(center);
  }  

}

.make-cell(@gutter: @grid-gutter-width) {
// Common styles for all grid cells
  .cell {
    padding-left:  (@gutter / 2);
    padding-right: (@gutter / 2);
    .flex(0 0 auto);

    &.width-auto {
      .flex-grow(1);
    }
	
	&.width-max {
	  .flex-grow(100);
	}
	
	&.width-min {
	  .flex-grow(unset);
	  .flex-shrink(1);
	}  	

    &.delimiter {
      padding: (@gutter / 2);
    }

    > .cell-body {
      position: relative;
    }
  }

// Specific variables
  @res: x, s, m, l, e;
  @screens: @screen-x, @screen-s, @screen-m, @screen-l, @screen-e;
  
// Styles for all resolutions of grid columns
  .resolution(@index) when (@index = 0) {
    @class: extract(@res, 1);
    @screen: extract(@screens, @index);

    .loop-grid-columns(@grid-columns, @class, width);
    .loop-grid-columns(@grid-columns, @class, offset);
    .loop-grid-columns(@grid-columns, @class, order);
    .loop-grid-columns(@grid-columns, @class, auto);
    .make-row-class(@class);    
    .resolution((@index + 1))
  }

  .resolution(@index) when (@index <= length(@res)) and (@index > 0) {
    @class: extract(@res, @index);
    @screen: extract(@screens, @index);

    @media (min-width: @screen) {
      .loop-grid-columns(@grid-columns, @class, width);
      .loop-grid-columns(@grid-columns, @class, offset);
      .loop-grid-columns(@grid-columns, @class, order);
      .loop-grid-columns(@grid-columns, @class, auto);
      .make-row-class(@class);    
    }  
    .resolution((@index + 1))
  }
  
  .resolution(0);
}

// Basic looping in LESS
.loop-grid-columns(@index, @class, @type) when (@index >= 0) {
  .calc-grid-column(@index, @class, @type);
  // next iteration
  .loop-grid-columns((@index - 1), @class, @type);
}

// Create WIDTH-AUTO classes of columns
.calc-grid-column(@index, @class, @type) when (@type = auto) and (@index = 0) {
  .width-@{class}-auto {
    .flex(1 auto);
    .flex-grow(1);
    .flex-basis(initial);
  }
  
  .width-@{class}-min {
	  .flex-grow(unset);
	  .flex-shrink(1);
  }  
}

// Create WIDTH classes of columns
.calc-grid-column(@index, @class, @type) when (@type = width) and (@index > 0) {
  .width-@{class}-@{index} {
   .flex-basis(percentage((@index / @grid-columns)));

   th&,
   td& {
     width: percentage((@index / @grid-columns));
   }
  }

}

// Create OFFSET classes of columns
.calc-grid-column(@index, @class, @type) when (@type = offset) {
  .offset-@{class}-@{index} {
    margin-left: percentage((@index / @grid-columns));
  }

  .offset-@{class}-@{index}.reverse-offset-@{class} {
    margin-right: percentage((@index / @grid-columns));
    margin-left: 0;
  }
}

// Create ORDER classes of columns
.calc-grid-column(@index, @class, @type) when (@type = order) {
  .order-@{class}-@{index} {
    flex-order: @index;
    order: @index;
  }
}


// Create Section full modificators classes for columns and  cells
.make-row-class(@class) {
// justify-content MAIN AXIS
  .left-@{class} {
    -webkit-box-pack: start;
   .justify-content(flex-start);
    text-align: left;
  }

  .center-@{class} {
   .justify-content(center);
    text-align: center;
  }

  .right-@{class} {
    -webkit-box-pack: end;
   .justify-content(flex-end);
    text-align: right;
  }
  
  .around-@{class} {
    -ms-flex-pack: distribute;
   .justify-content(space-around);
  }

  .between-@{class} {
   -webkit-box-pack: justify;
   -ms-flex-pack: justify;
   .justify-content(space-between);
  }  


// align-items SECONDARY AXES
  .top-@{class} {
    .align-items(flex-start);
  }

  .middle-@{class} {
    .align-items(center);
  }

  .bottom-@{class} {
    .align-items(flex-end);
  }

 
// disable wrapping  
  .nowrap-@{class} {
    .flex-wrap(nowrap);
  }
  
// enable wrapping  
  .wrap-@{class} {
    .flex-wrap(wrap);
  }  

  .column-@{class} {
    .flex-direction(column);
  }  

  .reverse-@{class} {
    .flex-direction(row-reverse);
  }  

  .column-@{class}.reverse-@{class} {
    -webkit-box-orient: vertical;
   .flex-direction(column-reverse);
  }

  .row-@{class}.noreverse-@{class} {
   .flex-direction(row);
  }  

  .row-@{class} {
   .flex-direction(row);
  }  


// CELL ADDITIONAL
// ordering
  .first-@{class} {
    flex-order: -1;
    order: -1;
  }

  .last-@{class} {
    flex-order: 1000;
    order: 1000;
  }

// justify-i along MAIN AXIS of container
  .align-@{class}-start {
    .align-self(flex-start);
  }
  .align-@{class}-end {
    .align-self(flex-end);
  }
  .align-@{class}-center {
    .align-self(center);
  }
  .align-@{class}-baseline {
    .align-self(baseline);
  }
  .align-@{class}-stretch {
    .align-self(stretch);
  }

  &.grow-@{class} {
    .flex-grow(1);
  }
  
  &.shrink-@{class} {
    .flex-grow(unset);
	.flex-shrink(1);
	
	.flex(0 auto);
  }  

  &.grow-@{class}-max {
    .flex-grow(100);
  }

  &.nogrow-@{class} {
    .flex-grow(0);
  }

  .no-height-@{class} {
    position: relative;

    > .cell-body {
      position: absolute;
      margin-right: @gutter / 2;
      bottom: 0;
      top: 0;
    }
  }
}